<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

  <!-- Parent -->
  <parent>
    <groupId>org.jboss.arquillian.extension</groupId>
    <artifactId>arquillian-persistence-parent</artifactId>
    <version>1.0.0.Final-SNAPSHOT</version>
  </parent>

  <!-- Model Version -->
  <modelVersion>4.0.0</modelVersion>

  <!-- Artifact Configuration -->
  <artifactId>arquillian-persistence-integration-tests</artifactId>
  <name>Arquillian Persistence Extension Integration Tests</name>
  <description>Demonstrates usage of Arquillian Persistence extension.</description>

  <properties>
    <version.cdi>1.0-SP1</version.cdi>
    <version.validation.api>1.0.0.GA</version.validation.api>
    <version.javaee-api.openejb>6.0-5</version.javaee-api.openejb>
    <version.poi>3.14</version.poi>
    <version.maven-dependency-plugin>2.3</version.maven-dependency-plugin>
    <server.version>8.1.0.Final</server.version>
    <!-- Chameleon container mode -->
    <mode>managed</mode>
  </properties>

  <dependencies>

    <dependency>
      <groupId>org.jboss.arquillian.extension</groupId>
      <artifactId>arquillian-persistence-api</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.arquillian.extension</groupId>
      <artifactId>arquillian-persistence-core</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
      <exclusions>
        <!--
          As TomEE comes with his own SPI we need to exclude it globally.
          It's imported on a profile basis.
        -->
        <exclusion>
          <artifactId>arquillian-transaction-jta</artifactId>
          <groupId>org.jboss.arquillian.extension</groupId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.jboss.arquillian.extension</groupId>
      <artifactId>arquillian-persistence-dbunit</artifactId>
      <version>${project.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.openejb</groupId>
      <artifactId>javaee-api</artifactId>
      <version>${version.javaee-api.openejb}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Test dependencies -->
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.arquillian.junit</groupId>
      <artifactId>arquillian-junit-container</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.arquillian.container</groupId>
      <artifactId>arquillian-container-chameleon</artifactId>
      <version>1.0.0.Alpha7</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.arquillian.extension</groupId>
      <artifactId>arquillian-transaction-jta</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>javax.enterprise</groupId>
      <artifactId>cdi-api</artifactId>
      <version>${version.cdi}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.shrinkwrap.resolver</groupId>
      <artifactId>shrinkwrap-resolver-impl-maven</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.shrinkwrap.descriptors</groupId>
      <artifactId>shrinkwrap-descriptors-api-javaee</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jboss.shrinkwrap.descriptors</groupId>
      <artifactId>shrinkwrap-descriptors-impl-javaee</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.apache.poi</groupId>
      <artifactId>poi</artifactId>
      <version>${version.poi}</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <!-- fails-safe-plugin should be used instead of surefire so that the container gets stopped even
          when the tests fail -->
      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <includes>
            <include>**/*Test.java</include>
          </includes>
        </configuration>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
            </goals>
          </execution>
          <execution>
            <id>verify</id>
            <goals>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Tell surefire to skip test, we are using the failsafe plugin -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

      <!-- This artifact shouldn't be deployed to maven repository -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>

    </plugins>

  </build>

  <profiles>

    <profile>
      <id>jbossas-7.0</id>
      <activation>
        <property>
          <name>server</name>
          <value>jbossas-7.0</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <arq.container.chameleon.configuration.chameleonTarget>JBoss AS:7.0.2.Final:${mode}
                </arq.container.chameleon.configuration.chameleonTarget>
              </systemPropertyVariables>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <version>${version.build.helper.plugin}</version>
            <executions>
              <execution>
                <id>add-test-source</id>
                <phase>generate-test-sources</phase>
                <goals>
                  <goal>add-test-source</goal>
                </goals>
                <configuration>
                  <sources>
                    <source>src/test/java-jpa-cache-eviction</source>
                  </sources>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
        <testResources>
          <testResource>
            <directory>src/test/resources-jboss</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-scripts</directory>
          </testResource>
        </testResources>
      </build>
    </profile>

    <profile>
      <id>wildfly-8.1-managed</id>
      <activation>
        <property>
          <name>!server</name>
        </property>
      </activation>
      <build>
        <testResources>
          <testResource>
            <directory>src/test/resources-wildfly-8.1.0</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-scripts</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
        </testResources>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <excludes>
                <!-- This test is using custom SQL which I don't want to
                  pollute with "SET INSERT_IDENTITY", because they should be portable. Hence
                  it's not essential for this profile to verify if this behaviour is correct
                  this test can be also skipped. It's tested on JBoss AS 7.0.2 with embedded
                  database. -->
                <exclude>**/DataCleanupStrategiesTest.java</exclude>
                <exclude>**/JpaCacheEviction*Test.java</exclude>
              </excludes>
              <systemPropertyVariables>
                <arq.container.chameleon.configuration.chameleonTarget>wildfly:8.1.0.Final:${mode}
                </arq.container.chameleon.configuration.chameleonTarget>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>wildfly</id>
      <activation>
        <property>
          <name>server</name>
          <value>wildfly</value><!-- we have to have modified wildfly image to be able to connect to it remotely -->
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <excludes>
                <!-- This test is using custom SQL which I don't want to
                  pollute with "SET INSERT_IDENTITY", because they should be portable. Hence
                  it's not essential for this profile to verify if this behaviour is correct
                  this test can be also skipped. It's tested on JBoss AS 7.0.2 with embedded
                  database. -->
                <exclude>**/DataCleanupStrategiesTest.java</exclude>
                <exclude>**/JpaCacheEvictionTest.java</exclude>
                <!-- EAR deployment fails when using @DataSourceDefinition in WildFly  -->
                <exclude>**/UserPersistenceEarDeploymentTest.java</exclude>
              </excludes>
              <systemPropertyVariables>
                <arq.container.chameleon.configuration.chameleonTarget>wildfly:${server.version}:${mode}
                </arq.container.chameleon.configuration.chameleonTarget>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jbossas-7.1</id>
      <activation>
        <property>
          <name>server</name>
          <value>jbossas-7.1</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <arq.container.chameleon.configuration.chameleonTarget>JBoss AS:7.1.1.Final:${mode}
                </arq.container.chameleon.configuration.chameleonTarget>
              </systemPropertyVariables>
              <excludes>
                <!-- This test is causing problems with @DataSourceDefinition.
                  For some reason it's not picked up before test.jar deployment, so persistence.xml
                  is referring to non existing datasource. -->
                <exclude>**/UserPersistenceEarDeploymentTest.java</exclude>
                <!-- This test is using custom SQL which I don't want to
                  pollute with "SET INSERT_IDENTITY", because they should be portable. Hence
                  it's not essential for this profile to verify if this behaviour is correct
                  this test can be also skipped. It's tested on JBoss AS 7.0.2 with embedded
                  database. -->
                <exclude>**/DataCleanupStrategiesTest.java</exclude>
                <!-- Due to the bug in JBoss 7.1.1.Final / Infinispan cache eviction
                throws NPE. This feature has been tested with 7.0.2.Final as for now. -->
                <exclude>**/JpaCacheEvictionTest.java</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jboss-7.0</id>
      <activation>
        <property>
          <name>server</name>
          <value>jbossas-7.0</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <arq.container.chameleon.configuration.chameleonTarget>JBoss AS:7.0.2.Final:${mode}
                </arq.container.chameleon.configuration.chameleonTarget>
              </systemPropertyVariables>
              <excludes>
                <!-- This test is causing problems with @DataSourceDefinition.
                  For some reason it's not picked up before test.jar deployment, so persistence.xml
                  is referring to non existing datasource. This only happens with mysql -->
                <exclude>**/UserPersistenceEarDeploymentTest.java</exclude>
                <!-- This test is using custom SQL which I don't want to
                  pollute with "SET INSERT_IDENTITY", because they should be portable. Hence
                  it's not essential for this profile to verify if this behaviour is correct
                  this test can be also skipped. It's tested on JBoss AS 7.0.2 with embedded
                  database. -->
                <exclude>**/DataCleanupStrategiesTest.java</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- Dockerized profiles
         Make sure that
          * your docker host is running
          * you have DOCKER_HOST env variable defined
    -->


    <profile>
      <id>jboss-postgresql-standalone</id>
      <activation>
        <property>
          <name>db</name>
          <value>postgres-standalone</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>9.3-1102-jdbc41</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>
        <testResources>
          <testResource>
            <directory>src/test/resources-jboss-postgres</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-scripts</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
        </testResources>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${version.docker.plugin}</version>
            <configuration>
              <autoPull>true</autoPull>
              <images>
                <image>
                  <name>postgres:9.3</name>
                  <alias>ape_postgres</alias>
                  <run>
                    <privileged>true</privileged>
                    <ports>
                      <port>65432:5432</port>
                    </ports>
                    <volumes>
                      <bind>
                        <volume>${project.basedir}/src/test/resources-jboss-postgres/shell:/scripts</volume>
                      </bind>
                    </volumes>
                    <wait>
                      <time>5000</time>
                      <exec>
                        <postStart>/bin/sh -c scripts/prepare-db.sh</postStart>
                      </exec>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jboss-postgresql-remote</id>
      <activation>
        <property>
          <name>db</name>
          <value>postgres:9.3</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.postgresql</groupId>
          <artifactId>postgresql</artifactId>
          <version>9.3-1102-jdbc41</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>
        <testResources>
          <testResource>
            <directory>src/test/resources-jboss-postgres</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-scripts</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
        </testResources>
      </build>
    </profile>

    <profile>
      <id>jboss-oracle11g-standalone</id>
      <activation>
        <property>
          <name>db</name>
          <value>oracle11g-standalone</value>
        </property>
      </activation>
      <dependencies>
        <!-- 1. Download this dependency from http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html
             2. install it in your local maven repository
                mvn install:install-file -Dfile=ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0.2.0 -Dpackaging=jar -->
        <dependency>
          <groupId>com.oracle</groupId>
          <artifactId>ojdbc6</artifactId>
          <version>11.2.0.2.0</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>
        <testResources>
          <!-- Unlike other profiles we use scripts from the profile-specific resource folder
               so that they can use specific delimiters-->
          <testResource>
            <directory>src/test/resources-jboss-oracle11g</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
        </testResources>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${version.docker.plugin}</version>
            <configuration>
              <autoPull>true</autoPull>
              <images>
                <image>
                  <name>alexeiled/docker-oracle-xe-11g</name>
                  <alias>ape_oracle11g</alias>
                  <run>
                    <privileged>true</privileged>
                    <ports>
                      <port>49160:22</port>
                      <port>49161:1521</port>
                      <port>49162:8080</port>
                    </ports>
                    <volumes>
                      <bind>
                        <volume>${project.basedir}/src/test/resources-jboss-oracle11g/shell:/scripts</volume>
                      </bind>
                    </volumes>
                    <wait>
                      <url>http://localhost:49162/apex/</url>
                      <time>60000</time>
                      <exec>
                        <postStart>/bin/sh -c scripts/prepare-db.sh</postStart>
                      </exec>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jboss-oracle11g-remote</id>
      <activation>
        <property>
          <name>db</name>
          <value>oracle11g</value>
        </property>
      </activation>
      <dependencies>
        <!-- 1. Download this dependency from http://www.oracle.com/technetwork/database/enterprise-edition/jdbc-112010-090769.html
             2. install it in your local maven repository
                mvn install:install-file -Dfile=ojdbc6.jar -DgroupId=com.oracle -DartifactId=ojdbc6 -Dversion=11.2.0.2.0 -Dpackaging=jar -->
        <dependency>
          <groupId>com.oracle</groupId>
          <artifactId>ojdbc6</artifactId>
          <version>11.2.0.2.0</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>
        <testResources>
          <!-- Unlike other profiles we use scripts from the profile-specific resource folder
               so that they can use specific delimiters-->
          <testResource>
            <directory>src/test/resources-jboss-oracle11g</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
        </testResources>
      </build>
    </profile>

    <profile>
      <id>jboss-mysql-standalone</id>
      <activation>
        <property>
          <name>db</name>
          <value>mysql-standalone</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>mysql</groupId>
          <artifactId>mysql-connector-java</artifactId>
          <version>${version.mysql.driver}</version>
        </dependency>
      </dependencies>
      <build>
        <testResources>
          <testResource>
            <directory>src/test/resources-jboss-mysql</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-scripts</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
        </testResources>
        <plugins>
          <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>${version.docker.plugin}</version>
            <configuration>
              <autoPull>true</autoPull>
              <images>
                <image>
                  <name>mysql</name>
                  <alias>ape_mysql</alias>
                  <run>
                    <privileged>true</privileged>
                    <ports>
                      <port>33306:3306</port>
                    </ports>
                    <env>
                      <MYSQL_ROOT_PASSWORD>letmein</MYSQL_ROOT_PASSWORD>
                    </env>
                    <volumes>
                      <bind>
                        <volume>${project.basedir}/src/test/resources-jboss-mysql/shell:/scripts</volume>
                      </bind>
                    </volumes>
                    <wait>
                      <time>10000</time>
                      <exec>
                        <postStart>/bin/sh -c scripts/prepare-db.sh</postStart>
                      </exec>
                    </wait>
                  </run>
                </image>
              </images>
            </configuration>
            <executions>
              <execution>
                <id>start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>jboss-mysql-remote</id>
      <activation>
        <property>
          <name>db</name>
          <value>mysql</value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>mysql</groupId>
          <artifactId>mysql-connector-java</artifactId>
          <version>${version.mysql.driver}</version>
        </dependency>
      </dependencies>
      <build>
        <testResources>
          <testResource>
            <directory>src/test/resources-jboss-mysql</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-scripts</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
        </testResources>
      </build>
    </profile>

    <!-- This profile requires VM to be up and running -->
    <profile>
      <id>jbossas-7.1-managed-mssql</id>
      <dependencies>
        <!-- 1. Download this dependency from http://msdn.microsoft.com/en-us/sqlserver/aa937724
          2. install it in your local maven repository mvn install:install-file -Dfile=sqljdbc4.jar
          -DgroupId=com.microsoft.sqlserver -DartifactId=sqljdbc4 -Dversion=4.0 -Dpackaging=jar -->
        <dependency>
          <groupId>com.microsoft.sqlserver</groupId>
          <artifactId>sqljdbc4</artifactId>
          <version>4.0</version>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>
        <testResources>
          <testResource>
            <directory>src/test/resources-jboss-mssql</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-scripts</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
        </testResources>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <excludes>
                <!-- This test is causing problems with @DataSourceDefinition.
                  For some reason it's not picked up before test.jar deployment, so persistence.xml
                  is referring to non existing datasource. -->
                <exclude>**/UserPersistenceEarDeploymentTest.java</exclude>
                <!-- This test is using custom SQL which I don't want to
                  pollute with "SET INSERT_IDENTITY", because they should be portable. Hence
                  it's not essential for this profile to verify if this behaviour is correct
                  this test can be also skipped. It's tested on JBoss AS 7.0.2 with embedded
                  database. -->
                <exclude>**/DataCleanupStrategiesTest.java</exclude>
                <!-- Due to the bug in JBoss 7.1.1.Final / Infinispan cache eviction
                throws NPE. This feature has been tested with 7.0.2.Final as for now. -->
                <exclude>**/JpaCacheEvictionTest.java</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <!-- FIXME those profiles are not working anymore with Chameleon -->
    <profile>
      <id>tomee-1.5-managed</id>
      <dependencies>
        <dependency>
          <groupId>org.apache.openejb</groupId>
          <artifactId>arquillian-tomee-remote</artifactId>
          <version>1.5.2</version>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.openejb</groupId>
          <artifactId>apache-tomee</artifactId>
          <version>1.5.2</version>
          <classifier>webprofile</classifier>
          <type>zip</type>
          <scope>test</scope>
        </dependency>
        <dependency>
          <groupId>org.apache.openejb</groupId>
          <artifactId>javaee-api</artifactId>
          <version>6.0-4</version>
          <scope>provided</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <excludes>
                <exclude>**/JpaCacheEvictionTest.java</exclude>
              </excludes>
            </configuration>
          </plugin>
        </plugins>
        <testResources>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-scripts</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-tomee-1.5</directory>
          </testResource>
        </testResources>
      </build>
    </profile>

    <profile>
      <id>glassfish-3.1-derby</id>
      <activation>
        <property>
          <name>mvel</name>
          <value>isdef server &amp;&amp; server == "glassfish-3.1" &amp;&amp;
            !isdef db
          </value>
        </property>
      </activation>
      <build>
        <testResources>
          <testResource>
            <directory>src/test/resources-glassfish-3.1-derby</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-scripts</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
        </testResources>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <arq.container.chameleon.configuration.chameleonTarget>GlassFish:3.1.2.2:embedded
                </arq.container.chameleon.configuration.chameleonTarget>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>glassfish-3.1-hsqldb</id>
      <activation>
        <property>
          <name>mvel</name>
          <value>isdef server &amp;&amp; server == "glassfish-3.1" &amp;&amp;
            isdef db &amp;&amp; db == "hsqldb"
          </value>
        </property>
      </activation>
      <dependencies>
        <dependency>
          <groupId>org.hsqldb</groupId>
          <artifactId>hsqldb</artifactId>
          <version>2.2.8</version>
          <type>jar</type>
          <scope>test</scope>
        </dependency>
      </dependencies>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
            <configuration>
              <systemPropertyVariables>
                <arq.container.chameleon.configuration.chameleonTarget>GlassFish:3.1.2.2:embedded
                </arq.container.chameleon.configuration.chameleonTarget>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
        <testResources>
          <testResource>
            <directory>src/test/resources-glassfish-3.1-hsqldb</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-datasets</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-scripts</directory>
          </testResource>
          <testResource>
            <directory>src/test/resources-test-extension</directory>
          </testResource>
        </testResources>
      </build>
    </profile>


  </profiles>

</project>
